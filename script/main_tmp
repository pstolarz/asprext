.load scriptext
.load dumpext
.load asprext

.printf "INFO: "; .expr /s masm

$$ config part
.if (${/d:script_dir}==0) { aS ${/v:script_dir} "script" }
.if (${/d:dmpcfg}==0) { aS ${/v:dmpcfg} "script/dumpext.conf" }
.if (${/d:vercfg}==0) { aS ${/v:vercfg} "script/versions.conf" }
.if (${/d:imgdmp}==0) { aS ${/v:imgdmp} "script/image.dump" }

aS ${/v:__aspr_maddr} 0x400000

.block
{
  r $t0 = 0;  $$ module base
  aS /c ${/v:__aspr_lm} lm a ${__aspr_maddr}
  .block
  {
    aS /c ${/v:__aspr_mbas} !sxtr [__aspr_lm]/^[^0-9]*([0-9A-Fa-f`]+)/0x\1
    aS /c ${/v:__aspr_mend} !sxtr [__aspr_lm]/^[^0-9]*[0-9A-Fa-f`]+[\x20\t]+([0-9A-Fa-f`]+)/0x\1
    .block { .if ($scmp("x${__aspr_mbas}", "x")!=0) { r $t0 = ${__aspr_mbas} } }
  }
  ad /q ${/v:__aspr_lm}
  ad /q ${/v:__aspr_maddr}

    .printf "INFO: Module base: 0x%p\n", @$t0

    $$ detect WOW emulation of 32bit code
    aS /c ${/v:__aspr_lm} lm m wow64
    .block { !sxtr -t 2 [__aspr_lm]/wow64 }
    ad /q ${/v:__aspr_lm}
    .if (@$t2==1)
    {
      $$ PE type
      r $t2 = wo(@$t0+dwo(@$t0+0x3c)+0x18)
      .if (@$t2==0x010b) {
        .echo "INFO: 32-bit PE under WOW64 emulation"
        sxi wob
      }
    }

    $$ search for bp addresses
    $$>a< ${script_dir}/get_extargs ${vercfg} ${__aspr_mbas}
    .if (@$t0==1)
    {
      $$ ASPR nag screen displayed via AV exception
      sxi av

      ba e1 ${__ld_imp_bp}
      bp kernel32!IsDebuggerPresent; g

      $$ anti-debug workaround
      .if (@eip==kernel32!IsDebuggerPresent) { g poi(esp); r eax=0; g }

      bc *
      !aspr_imports unload
      .echo "INFO: Loading ASPR imports..."
      !aspr_imports load ${__ld_imp_arg}

      ba e1 ${__ld_ptch_bp}; g; bc *
      !aspr_ipatch unload
      .echo "INFO: Loading ASPR patches..."
      !aspr_ipatch load ${__ld_ptch_arg}

      ad /q ${/v:__ld_imp_arg}
      ad /q ${/v:__ld_imp_bp}
      ad /q ${/v:__ld_ptch_arg}
      ad /q ${/v:__ld_ptch_bp}

      $$>a< ${script_dir}/tls_search ${__aspr_mbas}

      aS /c ${/v:__aspr_imports} !aspr_imports print -x

      $$ goto OEP
      ba e1 ${__detect_oep_bp}; g; bc *
      ad /q ${/v:__detect_oep_arg}
      ad /q ${/v:__detect_oep_bp}

$$      .echo "INFO: Applying ASPR import patches..."
$$      !aspr_ipatch apply -i

      !fopn -m "w+" ${dmpcfg}
      .if (@$t0!=0)
      {
        !dump_conf ${dmpcfg}

        !sxtr -t 1 [__aspr_imports]/\[imports\]
        .if (@$t1==1)
        {
          !fwrt @$t0 [__aspr_imports]

          .echo "INFO: Searching IDT table..."
          aS /c ${/v:__aspr_idts} !dump_serach idt -x ${__aspr_mbas}

          .block {
            aS /c ${/v:__aspr_idt} !sxtr [__aspr_idts]/\[directories\][\n]+(([\x20\t]*([\n]|([^[][^\n]*[\n])))+)/\1
            aS /c ${/v:__aspr_ifix} !sxtr [__aspr_idts]/\[imports_fix\][\n]+(([\x20\t]*([\n]|([^[][^\n]*[\n])))+)/\1
          }
          ad /q ${/v:__aspr_idts}
        }

        .echo "INFO: Preparing dump config file..."

        .block { !sxtr -t 1 [__aspr_idt]/. }
        !sxtr -t 2 [__tls]/.
        .if ((@$t1==1) | (@$t2==1)) {
          !fwrt @$t0 "\n[directories]\n"
          .if (@$t1==1) { !fwrt @$t0 [__aspr_idt] }
          .if (@$t2==1) { !fwrt @$t0 [__tls] }
        }

        .block { !sxtr -t 1 [__aspr_ifix]/. }
        .if (@$t1==1) {
          !fwrt @$t0 "\n[imports_fix]\n"
          !fwrt @$t0 [__aspr_ifix]
        }

        aS /c ${/v:__rsrc_cap_cmd} !dump_pe_info rsrc -C ${__aspr_mbas}
        .block {
          aS /c ${/v:__rsrc_sect} !sxtr -t 1 [__rsrc_cap_cmd]/section\(s\): ([0-9]+)[,]/\1
          .if (@$t1==1) { !fwrt @$t0 "\n[rsrc_fix]\nRecoverRsrc = yes\n" }
        }
        ad /q ${/v:__rsrc_cap_cmd}

        !fwrt @$t0 "\n[dump_pe]\nOutFile = ${imgdmp}\n"

        aS /c ${/v:__sects_chrt_cmd} !dump_sects_chrt -c ${__aspr_mbas}
        .block {
          aS /c ${/v:__sects_chrt} !sxtr [__sects_chrt_cmd]/\[sections\][\n]+(.*)/\1
        }
        ad /q ${/v:__sects_chrt_cmd}

        !fwrt @$t0 "\n[sections]\nSizeOfRawData = auto\n"
        .block {
          !fwrt @$t0 [__sects_chrt]
          .if (@$t1==1) { !fwrt @$t0 "${__rsrc_sect}.SizeOfRawData = vsize" }
        }

$$        !fwrt @$t0 "\n[optional_header]\nAddressOfEntryPoint = 0x1e2000\n"

        !aspr_init patch 0x004f7ad4 0x00590000 script/init.bin
        !dump_ldf 0x00590780 script/deobf.bin
        t; pt; t; r eip=0x00590780

        .echo "INFO: Break before dump"
        !fcls @$t0
      }

      ad /q ${/v:__rsrc_sect}
      ad /q ${/v:__sects_chrt}
      ad /q ${/v:__aspr_ifix}
      ad /q ${/v:__aspr_idt}
      ad /q ${/v:__aspr_imports}
      ad /q ${/v:__tls}
    }
  } .else {
    .echo "ERR: Module not found"
  }
}

ad /q ${/v:__aspr_mend}
ad /q ${/v:__aspr_mbas}
ad /q ${/v:__aspr_flags}
